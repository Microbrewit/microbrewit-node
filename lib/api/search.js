// Generated by CoffeeScript 1.10.0

/*
API wrapper for search endpoint

@author Torstein Thune
@copyright Microbrew.it 2015
 */

(function() {
  var Search, http,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  http = require('./http');

  Search = (function(superClass) {
    extend(Search, superClass);

    function Search() {
      return Search.__super__.constructor.apply(this, arguments);
    }

    Search.prototype.endpoint = 'search';

    Search.prototype.get = function(query, callback, token) {
      return Search.__super__.get.call(this, query, callback, token);
    };

    Search.prototype.ingredients = function(query, callback, token) {
      query.partial = 'ingredients';
      return this.get(query, callback, token);
    };

    Search.prototype.post = function() {
      return callback(new Error('Search does not accept POST calls.'));
    };

    Search.prototype.put = function() {
      return callback(new Error('Search does not accept PUT calls.'));
    };

    Search.prototype["delete"] = function() {
      return callback(new Error('Search does not accept DELETE calls.'));
    };

    return Search;

  })(http);

  module.exports = Search;

}).call(this);
