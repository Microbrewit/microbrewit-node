// Generated by CoffeeScript 1.10.0

/*
API wrapper for search endpoint

@author Torstein Thune
@copyright Microbrew.it 2015
 */

(function() {
  var Search, _, http, querystring,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  http = require('./http');

  querystring = require('querystring');

  _ = require('lodash');

  Search = (function(superClass) {
    extend(Search, superClass);

    function Search() {
      return Search.__super__.constructor.apply(this, arguments);
    }

    Search.prototype.endpoint = 'search';

    Search.prototype.searchUrl = 'https://search.microbrew.it';

    Search.prototype._generateESUrl = function(partial) {
      var url;
      if (partial == null) {
        partial = '';
      }
      url = "" + this.searchUrl;
      if (partial && partial !== '') {
        url += "/" + partial;
      }
      return url;
    };

    Search.prototype._parseESHit = function(esHit) {
      var hit, hitsFlattened, i, len, ref, source;
      hitsFlattened = [];
      ref = esHit.hits.hits;
      for (i = 0, len = ref.length; i < len; i++) {
        hit = ref[i];
        source = hit._source;
        delete hit._source;
        hitsFlattened.push(_.merge(hit, source));
      }
      esHit.hits.hits = hitsFlattened;
      return esHit;
    };

    Search.prototype.esSearch = function(query, callback, token) {
      var innerCallback;
      if (query.url == null) {
        query.url = (this._generateESUrl(query.partial)) + "?" + (querystring.stringify(query.params));
      }
      innerCallback = (function(_this) {
        return function(err, res, body) {
          body = _this._parseESHit(body);
          return callback(err, res, body);
        };
      })(this);
      console.log(query);
      return this.get(query, innerCallback, token);
    };

    Search.prototype.get = function(query, callback, token) {
      if (query.params == null) {
        query.params = query;
      }
      delete query.params.partial;
      delete query.params.headers;
      return Search.__super__.get.call(this, query, callback, token);
    };

    Search.prototype.ingredients = function(query, callback, token) {
      query.partial = 'ingredients';
      return this.get(query, callback, token);
    };

    Search.prototype.post = function(query, callback, token) {
      return callback(new Error('Search does not accept POST calls.'));
    };

    Search.prototype.put = function(query, callback, token) {
      return callback(new Error('Search does not accept PUT calls.'));
    };

    Search.prototype["delete"] = function(query, callback, token) {
      return callback(new Error('Search does not accept DELETE calls.'));
    };

    return Search;

  })(http);

  module.exports = Search;

}).call(this);
