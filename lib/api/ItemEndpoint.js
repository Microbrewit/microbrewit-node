// Generated by CoffeeScript 1.10.0

/*
Convenience class containing standard handlers for items (ingredients, glassware, breweries, etc)

@author Torstein Thune
@copyright Microbrew.it 2015
 */

(function() {
  var ItemEndpoint, http,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  http = require('./http');

  ItemEndpoint = (function(superClass) {
    extend(ItemEndpoint, superClass);

    function ItemEndpoint() {
      return ItemEndpoint.__super__.constructor.apply(this, arguments);
    }

    ItemEndpoint.prototype.get = function(query, callback, token) {
      var partial;
      if (typeof query === 'number') {
        return ItemEndpoint.__super__.get.call(this, {
          partial: query
        }, callback, token);
      } else if (query.id != null) {
        partial = query.id;
        delete query.id;
        if (query.partial) {
          partial += "/" + query.partial;
        }
        delete query.partial;
        return ItemEndpoint.__super__.get.call(this, {
          partial: partial,
          params: query
        }, callback, token);
      } else {
        partial = query.partial;
        delete query.partial;
        return ItemEndpoint.__super__.get.call(this, {
          partial: query.partial,
          params: query
        }, callback, token);
      }
    };

    ItemEndpoint.prototype["delete"] = function(query, callback, token) {
      var id;
      if (typeof query === 'number') {
        return ItemEndpoint.__super__["delete"].call(this, {
          partial: query
        }, callback, token);
      } else if (query.id != null) {
        id = query.id;
        delete query.id;
        return ItemEndpoint.__super__["delete"].call(this, {
          partial: id,
          params: query
        }, callback, token);
      } else {
        return ItemEndpoint.__super__["delete"].call(this, {
          params: query
        }, callback, token);
      }
    };

    ItemEndpoint.prototype.post = function(item, callback, token) {
      if (typeof item === 'object') {
        item = JSON.stringify(item);
      }
      return ItemEndpoint.__super__.post.call(this, {
        body: item
      }, callback, token);
    };

    return ItemEndpoint;

  })(http);

  module.exports = ItemEndpoint;

}).call(this);
